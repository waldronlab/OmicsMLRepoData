---
title: "Explore datasets in cBioPortalData"
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14px
        toc: true
        top-depth: 2
abstract: "Prepare U24 Supplement: AI/ML-ready"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r echo=FALSE, eval=TRUE}
suppressPackageStartupMessages({
    library(cBioPortalData)
    library(dplyr)
    library(tableone)
})
```

```{r load_data, echo=FALSE, eval=TRUE}
cbio <- cBioPortal()
cbioStudies <- getStudies(cbio) 
studyIds <- cbioStudies$studyId

## Load the cleaned files: these are actually created following the process 
## described this vignette below.
fnames <- list.files(getwd())
fname <- fnames[grep("cBioPortal_all_clinicalData_2", fnames)]
clinical_var_all <- readRDS(fname)

fname <- fnames[grep("cBioPortal_all_clinicalData_combined_", fnames)]
template <- readRDS(fname) # our curation/harmonization starts from this table
```

# Load cBioPortal data

```{r eval=TRUE}
cbio <- cBioPortal()
cbio
```

* `SampleList` : all `sampleListIds` for a particular `studyId`
```{r eval=TRUE}
studyId <- "acc_tcga"
x <- sampleLists(cbio, studyId)
dim(x)
as.data.frame(head(x))
```

## Two ways to get data
### cBioDataPack: Obtain data as zipped tarballs
```{r}
acc_1 <- cBioDataPack("acc_tcga", ask = TRUE)
acc_1
```

### cBioPortalData: Obtain data from the cBioPortal API
```{r}
acc_2 <- cBioPortalData(cbio, 
                        by = "hugoGeneSymbol", 
                        studyId = "acc_tcga",
                        genePanelId = "IMPACT341",
                        molecularProfileIds = c("acc_tcga_rppa", 
                                                "acc_tcga_linear_CNA")
)
acc_2
```

# Data availability

## Number of samples per studies available in cBioPortal

```{r eval=TRUE}
cbioStudies <- getStudies(cbio)  
studyNum <- nrow(cbioStudies)
paste("There are", studyNum, "studies available in cBioPortal on", Sys.Date())
head(cbioStudies, 3)

table(cbioStudies$publicStudy)  # TRUE if they are public data
sampleNum <- sum(cbioStudies$allSampleCount)  # The number of samples
paste("There are", sampleNum, "samples available in cBioPortal on", Sys.Date())
```

`cBioPortalData` accesses `r nrow(cbioStudies)` studies comprised of 
`r sum(cbioStudies$allSampleCount)` samples. `r sum(cbioStudies$publicStudy)`
of them are publicly available. There are 13 study-level metadata on general 
information, e.g. PMID.

## Compare to curatedTCGAData

cBioPortal hosts 90 TCGA studies for 36 different cancer types. (Any of the remaining 266 studies are overlapping with EH records? How to check it?)

```{r}
tcga <- cbioStudies$studyId[grep("tcga", cbioStudies$studyId)]
length(tcga)  # 90 TCGA studies are included in cBioPortal data
tcga_in_cbioportal <- c()

for (x in tcga) {
    y <- stringr::str_split(x, pattern = "_") %>% unlist
    tcga_in_cbioportal <- c(tcga_in_cbioportal, y[1])
}

## Name of 36 TCGA studies
unique(tcga_in_cbioportal)
```

31 TCGA datasets are available through both curatedTCGAData and cBioPortalData.

```{r}
data('diseaseCodes', package = "TCGAutils")
head(diseaseCodes)

common <- intersect(unique(toupper(tcga_in_cbioportal)),
                    diseaseCodes$Study.Abbreviation)
common
length(common) # 31 TCGA cancers' data are both available through curatedTCGAData and cBioPortalData 
```

### How to handle redundancy of the same dataset?

For example, there are two versions of TCGA-ACC datasets in cBioPortal.

```{r}
cbioStudies[grep("acc_tcga", cbioStudies$studyId),]
```

Check the redundancy of ACC datasets in curatedTCGAData and cBioPortal:

```{r}
## curatedTCGAData dataset
library(curatedTCGAData)
tcga_acc <- curatedTCGAData(diseaseCode = "ACC", assays = "*", version = "2.0.1")
tcga_acc

## cBioPortalData datasets
cbioStudies <- getStudies(cbio)
cbio_acc <- cbioStudies[which(cbioStudies$cancerTypeId == "acc"),]

## ACC dataset #1 in cBioPortalData
id <- "acc_tcga"
cbio_acc_clinic <- clinicalData(cbio, id)
dim(cbio_acc_clinic)
head(cbio_acc_clinic, 3)

cbio_acc_mol <- molecularProfiles(cbio, id)
dim(cbio_acc_mol)
cbio_acc_mol

cbio_allSamples <- allSamples(cbio, id) # all the samples
head(cbio_allSamples, 3)

## ACC dataset #2 in cBioPortalData
id <- "acc_tcga_pan_can_atlas_2018"
cbio_acc_clinic <- clinicalData(cbio, id)
dim(cbio_acc_clinic)
head(cbio_acc_clinic, 3)

cbio_acc_mol <- molecularProfiles(cbio, id)
dim(cbio_acc_mol)
cbio_acc_mol
```

Available clinical data varies even between datasets for the same disease 
(e.g. breast cancer) in cBioPortal.

```{r}
studyIds <- cbioStudies$studyId

## Use breast cancer (BRCA) as an example
brca_ind <- grep("brca", studyIds)
studyIds[brca_ind] # 19 breast cancer related datasets

a <- clinicalData(cbio, "brca_tcga_pub2015") # 818 patients with 109 metadata
b <- clinicalData(cbio, "brca_tcga_pub") # 825 patients with 36 metadata
length(intersect(colnames(a), colnames(b))) # 15 common metadata between two brca_tcga datasets
length(intersect(a$patientId, b$patientId)) # 688 common patients between two brca_tcga datasets
```

# Clinical data availability

We summarized the available metadata fields for all 356 studies in cBioPortal 
as a list named `clinical_var` and the number of studies include a given 
metadata (a total of 3,504) is saved in `allClinicalVar`. `clnical_var_all` is
a list with the length of 356, where each element is a full clinical metadata 
table for a given study. 

```{r eval=FALSE}
## All 360 studies (on 10.12.22)
studyIds <- cbioStudies$studyId
clinical_var_all <- vector(mode = "list", length = length(studyIds))
names(clinical_var_all) <- studyIds

for (studyId in studyIds) {
    x <- clinicalData(cbio, studyId)
    clinical_var_all[[studyId]] <- x
}

## Save the summary
fname <- paste0("cBioPortal_all_clinicalData_", Sys.Date(), ".rds")
saveRDS(clinical_var_all, fname)
```

The minimum and the maximum number of metadata per study is 7 and 172, respectively.
```{r eval=TRUE}
## Ranges of the number of available clinical variables
clinical_var <- lapply(clinical_var_all, colnames)
num <- sapply(clinical_var, length)
summary(num)
```

55 metadata are collected in more than 34 studies (~10%).
```{r eval=TRUE}
## Clinical variables that are available from >= 35 studies (~10%)
length(unique(unlist(clinical_var)))  # the number of unique clinical variables
allClinicalVar <- sort(table(unlist(clinical_var)), decreasing = TRUE)
sumMeta <- allClinicalVar[allClinicalVar > 34]

length(sumMeta) # the number of metadata collected by >= 35 studies
sumMeta 
```

## Combine all clinical data
Combine all the metadata (= 3,504) from all the studies (= 356).
```{r eval=FALSE}
# template <- data.frame(patientId = character(),
#                        SAMPLE_COUNT = character(),
#                        sampleId = character())
# for (i in seq_along(clinical_var_all)) {
#     template <- dplyr::full_join(template, clinical_var_all[[i]], 
#                             by = intersect(colnames(template),
#                                            colnames(clinical_var_all[[(i)]])))
# }

template <- as.data.frame(matrix(data = character(), nrow = 1, 
                                 ncol = (length(allClinicalVar)+1)))
colnames(template) <- c("studyId", names(allClinicalVar))

for (i in seq_along(clinical_var_all)) {
    clinical_var_all[[i]]$studyId <- names(clinical_var_all[i])
    template <- dplyr::full_join(template, clinical_var_all[[i]], 
                            by = colnames(clinical_var_all[[i]]))
    print(paste(i, "out of", length(clinical_var_all), "is added."))
}

template <- template[-1,] # remove the 1st NA row
fname <- paste0("cBioPortal_all_clinicalData_combined_", Sys.Date(), ".csv")
fwrite(template, fname)

dim(template)
```

```{r echo=FALSE}
dim(template)
```

### Most common clinical variables
```{r export_colnames_for_curation, eval=FALSE, echo=FALSE}
codebook <- stack(allClinicalVar)
codebook$pct_complete <- round(codebook$values/length(clinical_var_all)*100)
colnames(codebook)[2] <- "column_name"
codebook$description <- NA
codebook$harmonized_column_name <- NA
codebook <- codebook[,-1]

library(googlesheets4)
gs4_create("cBioPortalData_curation")
url <- "https://docs.google.com/spreadsheets/d/15vn8QJ9uYMCWx71lfhlguH5EPD7Z-mmeA9y8UpI5_Nk/edit?usp=sharing"
ss <- googledrive::as_id(url)
sheet_write(codebook, ss = ss, sheet = "clinical_variable_colnames")
```

55 clinical variables most widely available in cBioPortal data.

```{r fig.width=10, fig.height=4, eval=TRUE}
## Plot
end_point = 0.5 + length(sumMeta)*2 - 1
barplot(sumMeta/length(clinical_var)*100,
        main = "Availability of 55 clinical variables in cBioPortal data",
        ylab = "Study-level availability (%)",
        xlab = "",
        xaxt = "n", # Do not plot the default labels
        las = 2, space = 1)
text(seq(1.5, end_point, by = 2), par("usr")[3]-0.25, 
     srt = 60, adj = 1, xpd = TRUE,
     labels = paste(names(sumMeta)), cex = 0.65)
```



```{r}
## Check the agreements across redundant metadata entries
i <- 5
redun <- names(dup_sampleId)[i]

## Most common metadata across all cBioPortal datasets
selectedCols <- c("studyId", names(sumMeta))
template[which(template$sampleId == redun), selectedCols] %>% as.data.frame

## All available metadata across multiplicates
tb <- template[which(template$sampleId == redun),] 
col_keep <- which(colSums(is.na(tb)) != 7)
as.data.frame(tb[, col_keep])  

## Overlap between available and most-common metadata attributes for multiplicates
length(sumMeta)
length(col_keep)
length(intersect(names(col_keep), names(sumMeta)))
```

[Question] How can we do inference/merging of these data to make the most
complete and least redundant information?

### Values for the common attributes
```{r}
sub <- template[,which(colnames(template) %in% names(sumMeta))]
str(sub)
```



### Clinical variable availability at the sample level
```{r eval=TRUE}
x <- colSums(is.na(template)) %>% sort
x_percent <- round(((nrow(template)-x)/nrow(template))*100, 1)
head(x_percent, 20)
```

```{r fig.height=4, fig.width=7, eval=TRUE}
## Subset clinical variable with >= 20% value available out of all the samples (= 179,266)
sub <- x_percent[x_percent >= 20] # 23 variables out of 3,504
    
## Plot
end_point = 0.5 + length(sub) + length(sub) - 1
barplot(sub,
        main = "Availability of clinical variables for cBioPortal samples",
        ylab = "Completeness at the sample level (%)",
        xlab = "",
        xaxt = "n", # Do not plot the default labels
        las = 2, space = 1)
text(seq(1.5, end_point, by = 2), par("usr")[3]-0.25, 
     srt = 60, adj = 1, xpd = TRUE,
     labels = paste(names(sub)), cex = 0.75)
```
