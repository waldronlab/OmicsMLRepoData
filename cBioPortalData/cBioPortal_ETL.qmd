---
title: "ETL process for cBioPortal clinical metadata curation/harmonization"
author:
  - Sehyun Oh
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE,
                      collapse = TRUE,
                      eval = FALSE)
```


```{r}
cbio_etl_dir <- "~/OmicsMLRepo/OmicsMLRepoData/cBioPortalData/ETL"
list.files(cbio_etl_dir)
```


# Curated metadata table
This script collect all the curated metadata table for each attribute and 
create the `curated_all` table, which containing 189,439 sample for 146 newly
created curated columns.

```{r}
source(file.path(cbio_etl_dir, "0_assemble_curated_metadata.R"))
```

```{r save, eval=FALSE}
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
write_csv(curated_all, file.path(extDir, "cBioPortal_curated_metadata.csv")) ## 189439 x 146
```


# Sync curation maps
Curation maps are tables manually created in Google Sheet by assigning 
appropriate ontology terms to original values. These tables contain four 
main columns with some additional columns depending on a attribute.

Four main columns are labeled as `original_value`, `curated_ontology`,
`curated_contology_term_id`, and `curated_ontology_term_db`.

```{r}
source(file.path(cbio_etl_dir, "1_sync_curation_map.R"))
```

```{r save_curation_maps, eval=FALSE, echo=FALSE}
## Save curation maps
write.csv(age_map, file.path(cbio_maps_dir, "cBioPortal_age_map.csv"), row.names = FALSE)
write.csv(bodysite_map, file.path(cbio_maps_dir, "cBioPortal_bodysite_map.csv"), row.names = FALSE)
write.csv(disease_map, file.path(cbio_maps_dir, "cBioPortal_diseases_map.csv"), row.names = FALSE)
write.csv(country_map, file.path(cbio_maps_dir, "cBioPortal_country_map.csv"), row.names = FALSE)
write.csv(population_map, file.path(cbio_maps_dir, "cBioPortal_population_map.csv"), row.names = FALSE)
write.csv(treatment_name_map, file.path(cbio_maps_dir, "cBioPortal_treatment_name_map.csv"), row.names = FALSE)
write.csv(treatment_type_map, file.path(cbio_maps_dir, "cBioPortal_treatment_type_map.csv"), row.names = FALSE)
write.csv(treatment_unit_map, file.path(cbio_maps_dir, "cBioPortal_treatment_unit_map.csv"), row.names = FALSE)
write.csv(treatment_case_map, file.path(cbio_maps_dir, "cBioPortal_treatment_case_map.csv"), row.names = FALSE)
```


# Sync mering schemas
Because there are quite a lot of columns involved in cBioPortal metadata 
harmonization, its merging schema is created per attribute first. 
```{r}
source(file.path(cbio_etl_dir, "1_sync_merging_schema.R"))
```

```{r save_ms, eval=FALSE}
write.csv(age_ms, file.path(cbio_ms_dir, "cBioPortal_merging_schema_age.csv"), row.names = FALSE)
write.csv(disease_ms, file.path(cbio_ms_dir, "cBioPortal_merging_schema_disease.csv"), row.names = FALSE)
write.csv(treatment_ms, file.path(cbio_ms_dir, "cBioPortal_merging_schema_treatment.csv"), row.names = FALSE)
```


# Assemble merging schema
This script calculates the completeness and counts the number of unique 
values for both original and curated fields, and creates the cBioPortal 
merging schema table, `cbio_ms`.

```{r}
## Need to run the `0_assemble_curated_metadata.R` script first before running this
source(file.path(cbio_etl_dir, "2_populate_merging_schema_from_data.R"))
```

```{r eval=FALSE}
## GitHub project
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
write_csv(cbio_ms, file.path(extDir, "cBioPortal_merging_schema.csv"))

## Google Sheet
url <- "https://docs.google.com/spreadsheets/d/1t2GTvDpgIrR84_ECoft6bQbb2qUr9RoeFtLZWM-ZRDI/edit?usp=sharing"
ss <- googledrive::as_id(url)
googlesheets4::write_sheet(cbio_ms, ss = ss, sheet = "cBioPortal_merging_schema")
```




```{r}
source(file.path(cbio_etl_dir, "3_sync_data_dictionary.R"))
```






# Discrepancies
## Sex
## Population