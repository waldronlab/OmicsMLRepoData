---
title: "Harmonize PubMedID information in cbio data"
author:
  - Sehyun Oh
  - Kai Gravel-Pucillo
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
abstract: "Prepare U24 Supplement: AI/ML-ready"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                    warning = FALSE,
                    message = FALSE,
                    collapse = TRUE,
                    eval = TRUE)
```


# Overview

This .qmd file demonstrates a workflow for curating and harmonizing 
PubMedID data with the cbioportal dataset.
This file curates information derived from the cBioPortalData package to produce 
a curated column describing the PubMedID(s) of each study.


# Setup

## Load Packages

```{r load}
suppressPackageStartupMessages({
 library(dplyr)
library(tidyverse)
library(stringr)
library(rvest)
library(rols)
library(vctrs)
library(hash)
library(cBioPortalData)
})
```


## Setup for Curation

We will first add a `curation_id` consisting of study ID, patient ID, and sample ID (`studyId:patientId:sampleId`) to avoid confusion due to duplicated samples.
```{r curation_setup}
# Load cbio data
cbio <- readRDS("D:\\CUNY Internship\\cBioPortal_all_clinicalData_combined_2023-05-18.rds")

# Add curation ID
cbio$curation_id <- paste(cbio$studyId, cbio$patientId, cbio$sampleId, sep = ":")

# Setup google sheets link to mapping table
url <- "https://docs.google.com/spreadsheets/d/1u7-r_a2hhbgBbZGOWmvJHIeRetol8lBKdOVNCGP83pA/edit#gid=0"

ss <- googledrive::as_id(url)

# Define a project directory
proj_dir <- "D:\\CUNY Internship\\cbio\\Data_Type\\"
```


# Exploratory Data Analysis & Data Curation

## Identifying Relevant Columns

Next we will create a new dataframe containing only the columns that are relevant
to this curation, which are the curation_id and studyId columns, and filter for
unique studyID values. 
```{r}
# Create tibble
cbio <- tibble(cbio)

# Create a subset of cbio containing only relevant columns
studydesign_cols_cbio <- cbio[,c("curation_id", "studyId")]

# Create a summary dataframe of the relevant columns
unique_studies <- data.frame("study_id"=unique(studydesign_cols_cbio$studyId))
```

Then we will use the getStudies API call from the cBioPortalData package to get
the PubMedIDs for all studies:
```{r}
# Load cbio data object
cbio <- cBioPortal()

# Run API call the retrieve study-level information
studies <- getStudies(cbio, buildReport = TRUE)
head(studies)

# Select only relevant columns
studies <- studies %>% select(pmid, studyId)
```


# Curating PubMedID Column

Now we can join the two existing dataframes on their study ID column values to
create a dataset with study ID, and PubMed ID: 
```{r}
# Left join studies dataframe onto unique_studies dataframe
unique_studies <- left_join(unique_studies, studies, by=join_by("study_id"=="studyId"))

colnames(unique_studies) <- c("study_id", "pubmed_id")
```


## Export

Finally, we will export our completed table to GitHub.
```{r export_curated_table, eval=FALSE}
# export to GitHub
write.csv(unique_studies, file = file.path(proj_dir, "curated_pubmed_id.csv"), 
          row.names=F)
```