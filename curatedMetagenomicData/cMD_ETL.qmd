---
title: "ETL process for curatedMetagenomicData (cMD) metadata curation/harmonization"
author:
  - Sehyun Oh
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE,
                      collapse = TRUE,
                      eval = FALSE)
```

```{r}
suppressPackageStartupMessages({
    library(googlesheets4)
    library(readr)
    library(OmicsMLRepoR)
    library(dplyr)
})

cmd_etl_dir <- "~/OmicsMLRepo/OmicsMLRepoData/curatedMetagenomicData/ETL"
list.files(cmd_etl_dir)
```

# Assemble merging schema

This script load the merging/curation/harmonization schema tables 
**from Google Sheet** and summarize them in our 'merging schema' format, 
`cmd_ms`, with completeness and uniqueness information.

```{r}
source(file.path(cmd_etl_dir, "2_assemble_merging_schema.R"))
```

```{r save_cmd_merging_schema, eval=FALSE}
##### Other GitHub projects
## OmicsMLRepoData
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
write_csv(cmd_ms, file.path(extDir, "cMD_merging_schema.csv"))
write_csv(map, file.path(extDir, "cMD_ms_allCols.csv")) # accessory file
write_csv(dd, file.path(extDir, "cMD_dd_allCols.csv")) # accessory file

# ## OmicsMLDataHarmonizer
# harmonizerDataDir <- "~/OmicsMLRepo/OmicsMLRepoHarmonizer/data"
# write_csv(cmd_ms, file.path(harmonizerDataDir, "cMD_merging_schema.csv"))

##### Google Sheet
url <- "https://docs.google.com/spreadsheets/d/1xziFB_zBl32BjNarcyEN4GupTYpPtq5aDz0GbRbWvtk/edit?usp=sharing"
ss <- googledrive::as_id(url)
googlesheets4::write_sheet(cmd_ms, ss = ss, sheet = "cMD_merging_schema")
```

# Curated metadata table

This script collect all the curated metadata table for each attribute and 
create the `curated_all` table, which containing 22,588 sample for 148 columns,
including source, curated, and accessory columns.

```{r message=FALSE, warning=FALSE}
source(file.path(cmd_etl_dir, "0_assemble_curated_metadata.R"))
```


```{r save_curated_tb, eval=FALSE}
dir <- "~/OmicsMLRepo/OmicsMLRepoData"
fpath <- file.path(dir, "inst/extdata/cMD_curated_metadata_all.csv")
write.csv(curated_all, fpath, row.names = FALSE)

## Sync the version in other OmicsMLRepo package, OmicsMLRepoCuration
file.copy(from = fpath,
          to = "~/OmicsMLRepo/OmicsMLRepoCuration/inst/extdata/cMD_curated_metadata_all.csv",
          overwrite = TRUE)
```

# Format for release

This script creates a `cmd_meta_release` table, which containing only the 
87 curated attributes formatted in an user-facing version 
(e.g., no legacy/source columns, no ontology term id).

```{r}
# requires: `curated_all` from `0_assemble_curated_metadata.R` is saved
source(file.path(cmd_etl_dir, "6_format_for_release.R"))
```

```{r save_cmd_meta_release, eval=FALSE}
dir <- "~/OmicsMLRepo/OmicsMLRepoData"
fpath <- file.path(dir, "inst/extdata/cMD_curated_metadata_release.csv")
write.csv(cmd_meta_release, fpath, row.names = FALSE)

## Sync the version in GCS bucket
options(GCLOUD_SDK_PATH = "~/Tools/google-cloud-sdk")
AnVILGCP::avcopy(fpath, "gs://omics_ml_repo/cMD_curated_metadata_release.csv")
```

# Sync curation maps

Curation maps are tables manually created and maintained in Google Sheet. We assign appropriate ontology terms to original values. These tables contain four main columns with some additional columns depending on a attribute.

Four main columns are labeled as `original_value`, `curated_ontology`, `curated_ontology_term_id`, and `curated_ontology_term_db`.

The script below (`1_sync_curation_map.R`) syncs all the cMD curation maps from Google Sheet to the `cmd_maps_dir` (a directory under the local git project).

```{r cmd_save_curation_maps, eval=FALSE}
# Directory to save curation_maps from Google Sheet
cmd_maps_dir <- "~/OmicsMLRepo/OmicsMLRepoData/curatedMetagenomicData/maps"
source(file.path(cmd_etl_dir, "1_sync_curation_map.R"))
```

```{r cmd_maps_fromGHtoGoogle, eval=FALSE}
# Directory containing curation_maps
# In case maps were modified/cleaned programmatically
cmd_maps_dir <- "~/OmicsMLRepo/OmicsMLRepoData/curatedMetagenomicData/maps"
new_maps <- c("target_condition")
source(file.path(cmd_etl_dir, "1_sync_curation_map_upload.R"))
```

```{r save_maps_for_harmonizer, eval=FALSE}
# ## Save maps for harmonizer
# attrNames <- c("disease", "treatment", "bodysite")
# attrFnames <- paste0("cMD_", attrNames, "_map.csv")
# harmonizerDataDir <- "~/OmicsMLRepo/OmicsMLRepoHarmonizer/data"
# 
# file.copy(file.path(cmd_maps_dir, attrFnames),
#           file.path(harmonizerDataDir, attrFnames),
#           overwrite = TRUE)
```



# Establishing Data dictionary

## Initial assembly

The resulting table from the below script, `template_dd`, contains all the columns in the final version of cMD sampleMetadata (under the `col.name` column).

```{r eval=FALSE}
# returns: `template_dd`
source(file.path(cmd_etl_dir, "3_assemble_data_dictionary_template.R")) 
```

## Populate template data dictionary

Data dictionary contents should be modified only through the `template_*.R` scripts within the `~/OmicsMLRepo/OmicsMLRepoData/curatedMetagenomicData/ETL/R` directory.

```{r eval=FALSE}
## From `3_assemble_data_dictionary_template.R`
# duplicate object at the beginning because manipulations should be assigned 
# back to the original object, i.e., make modifications on the original object
filled_dd <- template_dd 

projDir <- "~/OmicsMLRepo/OmicsMLRepoData/curatedMetagenomicData"
mapDir <- file.path(projDir, "maps")
dataDir <- file.path(projDir, "data")
scriptDir <- file.path(projDir, "ETL/R")

# requires: `filled_dd` and paths to three directories (`mapDir`, `dataDir`, `scriptDir`)
# returns: the updated `filled_dd`
source(file.path(cmd_etl_dir, "4_populate_data_dictionary.R")) 
```

### Compare with the Google Drive version
```{r}
url <- "https://docs.google.com/spreadsheets/d/1xziFB_zBl32BjNarcyEN4GupTYpPtq5aDz0GbRbWvtk/edit?usp=sharing"
ss <- googledrive::as_id(url)
gd_dict <- googlesheets4::read_sheet(ss = ss, sheet = "cMD_data_dictionary")
```

This should be both `TRUE`. Unless, the version of dictionary in Google Drive
needs updates. 

```{r}
identical(colnames(filled_dd), colnames(gd_dict))
all(filled_dd$ColName %in% gd_dict$ColName)
```

### ODM templates
```{r}
url <- "https://docs.google.com/spreadsheets/d/1xziFB_zBl32BjNarcyEN4GupTYpPtq5aDz0GbRbWvtk/edit?usp=sharing"
ss <- googledrive::as_id(url)
odm_dict <- googlesheets4::read_sheet(ss = ss, sheet = "cMD_data_dictionary_forODM")
```

```{r}
setdiff(gd_dict$ColName, odm_dict$ColName) # attrs should be added to ODM template
setdiff(odm_dict$ColName, gd_dict$ColName) # attrs should be removed from ODM template
```



## Save

```{r save_cmd_dd_schema, eval=FALSE}
## GitHub project
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
write_csv(filled_dd, file.path(extDir, "cMD_data_dictionary.csv"))

## Google Sheet
url <- "https://docs.google.com/spreadsheets/d/1xziFB_zBl32BjNarcyEN4GupTYpPtq5aDz0GbRbWvtk/edit?usp=sharing"
ss <- googledrive::as_id(url)
googlesheets4::write_sheet(filled_dd, ss = ss, sheet = "cMD_data_dictionary")

## OmicsMLRepoR packages extdata
file.copy(from = file.path(extDir, "cMD_data_dictionary.csv"),
          to = "~/OmicsMLRepo/OmicsMLRepoR/inst/extdata/cMD_data_dictionary.csv",
          overwrite = TRUE)
```

# Expand data dictionary

Add the new attributes to the data dictionary.

```{r eval=FALSE}
projDir <- "~/OmicsMLRepo/OmicsMLRepoData/curatedMetagenomicData"
scriptDir <- file.path(projDir, "ETL/R")
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"

# returns: the updated `expanded_dd`
source(file.path(cmd_etl_dir, "5_expand_data_dictionary.R")) 
```

## Save

```{r save_cmd_expanded_dd_schema, eval=FALSE}
## GitHub project
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
write_csv(expanded_dd, file.path(extDir, "cMD4_data_dictionary.csv"))

## Google Sheet
url <- "https://docs.google.com/spreadsheets/d/1xziFB_zBl32BjNarcyEN4GupTYpPtq5aDz0GbRbWvtk/edit?usp=sharing"
ss <- googledrive::as_id(url)
googlesheets4::write_sheet(expanded_dd, ss = ss, sheet = "cMD4_data_dictionary")
```


# Established Data Dictionary
Once we established the curatedMetagenomicData metadata dictionary, we keep the
Google Sheet version as a default and start to make a modification on Google
Sheet (as of 11.19.24). 
```{r}
## Download from Google Sheet
url <- "https://docs.google.com/spreadsheets/d/1xziFB_zBl32BjNarcyEN4GupTYpPtq5aDz0GbRbWvtk/edit?usp=sharing"
ss <- googledrive::as_id(url)
filled_dd <- googlesheets4::read_sheet(ss = ss, sheet = "cMD_data_dictionary")
```

```{r}
## GitHub project
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
write_csv(filled_dd, file.path(extDir, "cMD_data_dictionary.csv"))

## OmicsMLRepoR packages extdata
file.copy(from = file.path(extDir, "cMD_data_dictionary.csv"),
          to = "~/OmicsMLRepo/OmicsMLRepoR/inst/extdata/cMD_data_dictionary.csv",
          overwrite = TRUE)
```




# Dynamic Enum

```{r}
enum_dd <- filled_dd
enum_dd$dynamic_enum <- NA
enum_dd$dynamic_enum_property <- NA
```

This script populate the dynamic enum nodes for the selected attributes. Target attributes are inside the script, so if you want to add/remove target attributes to extract dynamic enum nodes for, make a modification in this script.

```{r eval=FALSE}
# requires: `enum_dd`
# returns: `cmd_dd`
source(file.path(cmd_etl_dir, "5_dynamic_enum.R"))  
```

```{r eval=FALSE, echo=FALSE}
## Test individual dynamic enum
target_attr <- c("biomarker", "body_site", "country", "disease", "hla",
                 "target_condition", "treatment")
curated_col <- target_attr[5]
dd <- read_csv("~/OmicsMLRepo/OmicsMLRepoData/inst/extdata/cMD_data_dictionary.csv")
colnames <- c(curated_col, paste0("curated_", curated_col))
ind <- which(dd$col.name %in% colnames)
terms <- dd[[ind, "ontology"]] %>% 
    strsplit(split = "\\|") %>% 
    unlist %>% na.omit %>% as.vector
terms <- gsub("SNOMED:", "", terms)
onto <- sapply(terms, function(x) unlist(strsplit(x, split = ":"))[1])
topNodes <- commonNodes(ids = terms, dbs = onto)
topNodes
```

```{r save_cmd_dd_schema, eval=FALSE}
## GitHub project
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
write_csv(cmd_dd, file.path(extDir, "cMD_data_dictionary.csv"))

## Google Sheet
url <- "https://docs.google.com/spreadsheets/d/1xziFB_zBl32BjNarcyEN4GupTYpPtq5aDz0GbRbWvtk/edit?usp=sharing"
ss <- googledrive::as_id(url)
googlesheets4::write_sheet(cmd_dd, ss = ss, sheet = "cMD_data_dictionary")
```

# Main files

```{r}
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
curated_all <- read_csv(file.path(extDir, "cMD_curated_metadata_release.csv"))
cmd_ms <- read_csv(file.path(extDir, "cMD_merging_schema.csv"))
cmd_dd <- read_csv(file.path(extDir, "cMD_data_dictionary.csv"))
```
