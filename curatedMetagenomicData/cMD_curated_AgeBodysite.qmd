---
title: "Harmonize disease/age/bodysite information in cMD sample metadata"
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14px
        toc: true
        top-depth: 3
abstract: "Prepare U24 Supplement: AI/ML-ready"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, 
                      collapse = TRUE, eval = FALSE)
```

# Load Packages 
```{r}
suppressPackageStartupMessages({
    library(gsheet)
    library(dplyr)
    library(RCurl) # for getURL
    library(curatedMetagenomicData)
    library(OmicsMLRepoData)
    library(readr)
    library(tidyr)
    library(yaml)
    library(googlesheets4)
    library(tidyverse)
    library(plyr)
    library(rols)
})
```

```{r echo=FALSE}
## Add the `curation_id` column
proj_dir <- "~/OmicsMLRepo/OmicsMLRepoData/curatedMetagenomicData/"
sampleMetadata$curation_id <- paste(sampleMetadata$study_name,
                                    sampleMetadata$sample_id,
                                    sep = ":")

## Google Sheet connection
url <- "https://docs.google.com/spreadsheets/d/1QSbB_b1DkfqOc7q5eHE0IDHSiGqNUyTE8d4GzbSEzjM/edit?usp=sharing"
ss <- googledrive::as_id(url)
```


# Age
## EDA on Age-related attributes
### `age` and `infant_age`
```{r}
age_tb <- sampleMetadata[,c("curation_id", "age", "infant_age", 
                            "gestational_age", "age_category")]

## Samples with both age and infant_age values 
both_ind <- which(!is.na(age_tb$age) & !is.na(age_tb$infant_age))
length(both_ind)

## Samples without either age or infant_age values 
no_ind <- which(is.na(age_tb$age) & is.na(age_tb$infant_age))
length(no_ind)
```

```{r sanity_check_infant_age}
## Samples with infant_age and age >=1
table(age_tb$age[both_ind]) 
ind_0yr <- intersect(both_ind, which(age_tb$age == 0))
ind_1yr <- intersect(both_ind, which(age_tb$age == 1))
ind_2yr <- intersect(both_ind, which(age_tb$age == 2))
ind_3yr <- intersect(both_ind, which(age_tb$age == 3))

## Double-check infant_age and age >=1 agree
all(age_tb$infant_age[ind_0yr] < 365*1 & age_tb$infant_age[ind_0yr] >= 0)
all(age_tb$infant_age[ind_1yr] < 365*2 & age_tb$infant_age[ind_1yr] >= 365)
all(age_tb$infant_age[ind_2yr] < 365*3 & age_tb$infant_age[ind_2yr] >= 365*2)
all(age_tb$infant_age[ind_3yr] < 365*4 & age_tb$infant_age[ind_3yr] >= 365*3)
```

There are 15 samples assigned with `age = 0` while there `infant_age` is larger
than 365. However, the final `curated_age` will use most detailed information
(i.e. `infant_age > 365` instead of `age = 0` for a given sample), this error
will be self-corrected in the process.

```{r sanity_check_age_disagreement} 
age_tb_0yr <- age_tb[ind_0yr,]
errored_ind <- which(!age_tb_0yr$infant_age < 365*1 & age_tb_0yr$infant_age >= 0)
age_tb_0yr[errored_ind,]
```

### `gestational_age`
No observations should exceed 43 weeks.
```{r sanity_check_gestational_age}
sum(sampleMetadata$gestational_age > 43, na.rm = TRUE) # should be 0
```

### `age_category`
Except one, all the samples in cMD has age-related information as a specific
numeric value and/or age category. (Check whether this NA entry can be updated.)
```{r sanity_check_age_category}
table(age_tb$age_category[no_ind], useNA = "ifany") # age_category of those samples without any other age-related info
table(age_tb$age_category[-no_ind], useNA = "ifany")

na_ind <- which(is.na(age_tb$age_category))
sampleMetadata[na_ind, 1:15]
```

## Curation
### `age` and `infant_age`
* Curation schema we applied on age-related attributes are
    - Use `infant_age` if both `age` and `infant_age` are available
    - When both `age` and `infant_age` are not available, use `age_category`
    - If `age` or `infant_age` is available, assign age_group based on them 
    instead of using `age_category`
    
```{r}
curated_infant_age <- age_tb %>%
    dplyr::filter(!is.na(infant_age)) %>%
    dplyr::transmute(curation_id = curation_id,
                     original_age_source = "infant_age",
                     original_age_value = infant_age,
                     original_age_unit = "day",
                     curated_age_years = infant_age/365,
                     curated_age_min = infant_age/365,
                     curated_age_max = infant_age/365,
                     curated_age_group = NA,
                     curated_age_group_ontology_term_id = NA)

curated_age <- age_tb %>%
    dplyr::filter(is.na(infant_age) & !is.na(age)) %>% 
    dplyr::transmute(curation_id = curation_id, 
                     original_age_source = "age",
                     original_age_value = age,
                     original_age_unit = "year",
                     curated_age_years = age,
                     curated_age_min = age,
                     curated_age_max = age,
                     curated_age_group = NA,
                     curated_age_group_ontology_term_id = NA)

# no_age_info <- age_tb %>%
#     dplyr::filter(is.na(age) & is.na(infant_age)) %>%
#     dplyr::transmute(curation_id = curation_id, 
#                      original_age_source = "age",
#                      original_age_value = age,
#                      original_age_unit = "year",
#                      curated_age = age,
#                      curated_age_min = age,
#                      curated_age_max = age,
#                      curated_age_group = NA,
#                      curated_age_group_ontology = NA)    
```


### `age_category`
```{r age_category}
## If `age_category` is the only available age-related metadata, use it as
## an input for `curated_age_group`. Unless, curate `curated_age_group` is
## calculated based on the actual numeric variable using ontology.
age_group_only <- age_tb %>%
    dplyr::filter(is.na(age) & is.na(infant_age)) %>%
    dplyr::transmute(curation_id = curation_id, 
                     age_category = age_category, # keep this for mapping
                     original_age_source = "age_category",
                     original_age_value = NA,
                     original_age_unit = NA,
                     curated_age_years = NA,
                     curated_age_min = NA,
                     curated_age_max = NA,
                     curated_age_group = NA,
                     curated_age_group_ontology_term_id = NA)  

age_group_need_curation <- age_tb %>%   # curated age fields are filled with numeric value
    dplyr::filter(!is.na(age) | !is.na(infant_age)) %>%
    dplyr::transmute(curation_id = curation_id,
                     curated_age_group = NA,
                     curated_age_group_ontology_term_id = NA)
```

Original curation on `age_category` is erroneous and not following proper
onthology definition. (e.g. infant, 19 for schoolage)

```{r EDA_age_category}
## Age ranges for infant category (unit in 'day')
age_tb %>%
    filter(age_category == "newborn") %>%
    filter(!is.na(infant_age)) %>%
    summarize(infant_age_min = min(infant_age), 
              infant_age_max = max(infant_age))

## Definition of `age_category` used in cMD sampleMetadata
age_categories <- unique(age_tb$age_category)
age_category_def <- data.frame(original_value = age_categories,
                               original_value_min = NA,
                               original_value_max = NA)
for (i in seq_along(age_categories)) {
    res <- age_tb %>%
        filter(age_category == age_categories[i]) %>%
        filter(!is.na(age))
    age_category_def[i, 2] <- min(res$age)
    age_category_def[i, 3] <- max(res$age)
}

## The original `age_category` definition (not mutually exclusive/ wrong)
age_category_def
```

```{r export_gs_sheet_for_age, eval=FALSE, echo=FALSE}
age_group_ontology <- data.frame(original_value = NA,
                                 curated_age_group = NA,
                                 curated_age_group_ontology_term_id = NA)
sheet_write(age_group_ontology, ss = ss, sheet = "age_group_ontology")
```

```{r eval=FALSE}
## Import the age-mapping table
age_group_map <- read_sheet(ss, sheet = "age_group_ontology")
age_group_map

## Save
write.csv(age_group_map, "maps/cMD_age_category_ontology.csv", row.names = FALSE)
```


### Update sampleMetadata
```{r load_age_map, echo=FALSE}
age_group_map <- read.csv("maps/cMD_age_category_ontology.csv", header = TRUE)
```

```{r age_group_for_no_numeric_age}
## age_group ontology
curated_age_group <- plyr::mapvalues(x = age_group_only$age_category, 
                                     from = age_group_map$original_value, 
                                     to = age_group_map$curated_ontology, 
                                     warn_missing = TRUE)

## age_group min
curated_age_min <- plyr::mapvalues(x = age_group_only$age_category, 
                                   from = age_group_map$original_value, 
                                   to = age_group_map$curated_age_min, 
                                   warn_missing = TRUE)

## age_group max
curated_age_max <- plyr::mapvalues(x = age_group_only$age_category, 
                                   from = age_group_map$original_value, 
                                   to = age_group_map$curated_age_max, 
                                   warn_missing = TRUE)

## Add the curated values
age_group_only$curated_age_group <- curated_age_group
age_group_only$curated_age_min <- as.numeric(curated_age_min)
age_group_only$curated_age_max <- as.numeric(curated_age_max)

age_group_only <- age_group_only[,-which(colnames(age_group_only) == "age_category")]
```

```{r age_group_for_numeric_age}
curated_numeric_age <- rbind(curated_infant_age, curated_age) 

## Assign age_group based on the numeric age info
res_pool <- age_group_map$curated_ontology[order(age_group_map$curated_age_min)]
res_ind <- findInterval(curated_numeric_age$curated_age_years, vec = sort(age_group_map$curated_age_min))
curated_numeric_age$curated_age_group <- res_pool[res_ind]

curated_age_all <- rbind(curated_numeric_age, age_group_only)
nrow(curated_age_all) == nrow(age_tb) ## Check all 22,588 samples are there = Should be `TRUE`

## Assign ontology to all
age_onto <- plyr::mapvalues(x = curated_age_all$curated_age_group, 
                            from = age_group_map$curated_ontology, 
                            to = basename(age_group_map$curated_ontology_term_id), 
                            warn_missing = TRUE)
curated_age_all$curated_age_group_ontology_term_id <- age_onto
```

```{r eval=FALSE}
## Save
curated_age_all <- curated_age_all[order(curated_age_all$curation_id),]
write.csv(curated_age_all, 
          file = file.path(proj_dir, "data/curated_age.csv"),
          row.names = FALSE)
```

```{r}
x <- read.csv(file.path(proj_dir, "data/curated_age.csv"))
```



# Bodysite
## Curation
A part of bodysite curation is available in [body-site-ontology.csv](https://github.com/waldronlab/curatedMetagenomicDataCuration/blob/master/inst/extdata/body-site-ontology.csv) under curatedMetagenomicDataCuration GitHub repository.

This curation file is confirmed to contain all the values from sampleMetadta
table while there are some discrepant, missing, and wrong values. For the 
further curation, this table is exported as Google Sheet.

```{r eval=FALSE}
file_url <- "https://raw.githubusercontent.com/waldronlab/curatedMetagenomicDataCuration/master/inst/extdata/body-site-ontology.csv"
cMD_bodysite <- read.csv(file_url, sep = ",", header = TRUE)
colnames(cMD_bodysite) <- c("original_value",
                            "curated_ontology_term",
                            "curated_ontology_term_id")
sheet_write(cMD_bodysite, ss = ss, sheet = "bodysite_ontology")

## Confirm that the manual curation table contains all the values in sampleMetadata
bodysites <- unique(c(sampleMetadata$body_site,
                      sampleMetadata$body_subsite))
setdiff(bodysites, cMD_bodysite$original_value)
```

Manual curated file is imported.
```{r}
## Import the curated bodysite-mapping table
url <- "https://docs.google.com/spreadsheets/d/1QSbB_b1DkfqOc7q5eHE0IDHSiGqNUyTE8d4GzbSEzjM/edit?usp=sharing"
ss <- googledrive::as_id(url)
bodysite_map <- read_sheet(ss, sheet = "bodysite_ontology")
bodysite_map
```

Double-check whether the curation is correct. Any curated ontology terms
returned with `corret == FLASE` in `validation_tb` should be reviewed.

```{r}
validation_tb <- data.frame(matrix(NA, nrow = nrow(bodysite_map), ncol = 4))
colnames(validation_tb) <- c("curated_onto_term", "curated_onto_id", 
                             "query_onto_term", "correct")

for (i in seq_len(nrow(bodysite_map))) {
    onto_term <- bodysite_map$curated_ontology_term[i]
    onto_id <- basename(bodysite_map$curated_ontology_term_id[i])
    qry <- OlsSearch(q = onto_id, exact = TRUE)
    qry <- olsSearch(qry)
    qdrf <- as(qry, "data.frame")
    
    validation_tb$curated_onto_term[i] <- onto_term
    validation_tb$curated_onto_id[i] <- onto_id
    validation_tb$query_onto_term[i] <- unique(qdrf$label)
    validation_tb$correct[i] <- identical(validation_tb$curated_onto_term[i],
                                       validation_tb$query_onto_term[i])
}

table(validation_tb$correct, useNA = "ifany")
```

```{r eval=FALSE}
sheet_write(bodysite_map, ss = ss, sheet = "bodysite_ontology")

## Save
write.csv(bodysite_map, "maps/cMD_bodysite_ontology.csv", row.names = FALSE)
```

### Update sampleMetadata
Curate the bodysite-related metadata in the sampleMetadata table. Because less
than 10% of samples contain `body_subsite` information while all the samples
have `body_site` information, I keep both columns in curated format. Also, I 
removed any `body_subsite` value that is identical to `body_site`.

```{r}
bodysite_tb <- sampleMetadata[,c("curation_id", "body_site", "body_subsite")]
curated_bodysite <- bodysite_tb %>%
    transmute(curation_id = curation_id,
              curated_body_site = mapvalues(x = bodysite_tb$body_site,
                                            from = bodysite_map$original_value,
                                            to = bodysite_map$curated_ontology_term,
                                            warn_missing = TRUE),
              curated_body_site_ontology_term_id = mapvalues(x = bodysite_tb$body_site,
                                                             from = bodysite_map$original_value,
                                                             to = basename(bodysite_map$curated_ontology_term_id),
                                                             warn_missing = TRUE),
              curated_body_subsite = mapvalues(x = bodysite_tb$body_subsite,
                                               from = bodysite_map$original_value,
                                               to = bodysite_map$curated_ontology_term,
                                               warn_missing = TRUE),
              curated_body_subsite_ontology_term_id = mapvalues(x = bodysite_tb$body_subsite,
                                                                from = bodysite_map$original_value,
                                                                to = basename(bodysite_map$curated_ontology_term_id),
                                                                warn_missing = TRUE))

## Remove body_subsite that is identical to body_site
redundant_ind <- which(curated_bodysite$curated_body_site == curated_bodysite$curated_body_subsite)
curated_bodysite[redundant_ind, c("curated_body_subsite", "curated_body_subsite_ontology_term_id")] <- NA
```

```{r eval=FALSE}
## Save
write.csv(curated_bodysite,
          file = "data/curated_bodysite.csv",
          row.names = FALSE)
```
