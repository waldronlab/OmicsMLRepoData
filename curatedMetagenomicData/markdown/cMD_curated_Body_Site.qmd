---
  title: "Harmonize age/bodysite information in cMD sample metadata"
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
  fontsize: 14px
toc: true
top-depth: 3
abstract: "Prepare U24 Supplement: AI/ML-ready"
---
  
  ```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, 
                      collapse = TRUE, eval = FALSE)
```

# Load Packages 
```{r}
suppressPackageStartupMessages({
  library(gsheet)
  library(dplyr)
  library(RCurl) # for getURL
  library(curatedMetagenomicData)
  library(OmicsMLRepoData)
  library(readr)
  library(tidyr)
  library(yaml)
  library(googlesheets4)
  library(tidyverse)
  library(plyr)
  library(rols)
})
```

```{r echo=FALSE}
## Add the `curation_id` column
proj_dir <- "~/OmicsMLRepo/OmicsMLRepoData/curatedMetagenomicData/"
sampleMetadata$curation_id <- paste(sampleMetadata$study_name,
                                    sampleMetadata$sample_id,
                                    sep = ":")

## Google Sheet connection
url <- "https://docs.google.com/spreadsheets/d/1QSbB_b1DkfqOc7q5eHE0IDHSiGqNUyTE8d4GzbSEzjM/edit?usp=sharing"
ss <- googledrive::as_id(url)
```

# Bodysite
## Curation
A part of bodysite curation is available in [body-site-ontology.csv](https://github.com/waldronlab/curatedMetagenomicDataCuration/blob/master/inst/extdata/body-site-ontology.csv) under curatedMetagenomicDataCuration GitHub repository.

This curation file is confirmed to contain all the values from sampleMetadta
table while there are some discrepant, missing, and wrong values. For the 
further curation, this table is exported as Google Sheet.

```{r eval=FALSE}
file_url <- "https://raw.githubusercontent.com/waldronlab/curatedMetagenomicDataCuration/master/inst/extdata/body-site-ontology.csv"
cMD_bodysite <- read.csv(file_url, sep = ",", header = TRUE)
colnames(cMD_bodysite) <- c("original_value",
                            "curated_ontology_term",
                            "curated_ontology_term_id")
sheet_write(cMD_bodysite, ss = ss, sheet = "bodysite_ontology")

## Confirm that the manual curation table contains all the values in sampleMetadata
bodysites <- unique(c(sampleMetadata$body_site,
                      sampleMetadata$body_subsite))
setdiff(bodysites, cMD_bodysite$original_value)
```

Manual curated file is imported.
```{r}
## Import the curated bodysite-mapping table
url <- "https://docs.google.com/spreadsheets/d/1QSbB_b1DkfqOc7q5eHE0IDHSiGqNUyTE8d4GzbSEzjM/edit?usp=sharing"
ss <- googledrive::as_id(url)
bodysite_map <- read_sheet(ss, sheet = "bodysite_ontology")
bodysite_map
```

Double-check whether the curation is correct. Any curated ontology terms
returned with `corret == FLASE` in `validation_tb` should be reviewed.

```{r}
validation_tb <- data.frame(matrix(NA, nrow = nrow(bodysite_map), ncol = 4))
colnames(validation_tb) <- c("curated_onto_term", "curated_onto_id", 
                             "query_onto_term", "correct")

for (i in seq_len(nrow(bodysite_map))) {
  onto_term <- bodysite_map$curated_ontology_term[i]
  onto_id <- basename(bodysite_map$curated_ontology_term_id[i])
  qry <- OlsSearch(q = onto_id, exact = TRUE)
  qry <- olsSearch(qry)
  qdrf <- as(qry, "data.frame")
  
  validation_tb$curated_onto_term[i] <- onto_term
  validation_tb$curated_onto_id[i] <- onto_id
  validation_tb$query_onto_term[i] <- unique(qdrf$label)
  validation_tb$correct[i] <- identical(validation_tb$curated_onto_term[i],
                                        validation_tb$query_onto_term[i])
}

table(validation_tb$correct, useNA = "ifany")
```

```{r eval=FALSE}
sheet_write(bodysite_map, ss = ss, sheet = "bodysite_ontology")

## Save
write.csv(bodysite_map, "maps/cMD_body_site_ontology.csv", row.names = FALSE)
```

### Update sampleMetadata
Curate the bodysite-related metadata in the sampleMetadata table. Because less
than 10% of samples contain `body_subsite` information while all the samples
have `body_site` information, I keep both columns in curated format. Also, I 
removed any `body_subsite` value that is identical to `body_site`.

```{r}
bodysite_tb <- sampleMetadata[,c("curation_id", "body_site", "body_subsite")]
curated_bodysite <- bodysite_tb %>%
  mutate(mapped_body_site = mapvalues(x = bodysite_tb$body_site,
                                      from = bodysite_map$original_value,
                                      to = bodysite_map$curated_ontology_term,
                                      warn_missing = TRUE),
         mapped_body_site_ontology_term_id = mapvalues(x = bodysite_tb$body_site,
                                                       from = bodysite_map$original_value,
                                                       to = basename(bodysite_map$curated_ontology_term_id),
                                                       warn_missing = TRUE),
         mapped_body_subsite = mapvalues(x = bodysite_tb$body_subsite,
                                         from = bodysite_map$original_value,
                                         to = bodysite_map$curated_ontology_term,
                                         warn_missing = TRUE),
         mapped_body_subsite_ontology_term_id = mapvalues(x = bodysite_tb$body_subsite,
                                                          from = bodysite_map$original_value,
                                                          to = basename(bodysite_map$curated_ontology_term_id),
                                                          warn_missing = TRUE))

## Remove body_subsite that is identical to body_site
redundant_ind <- which(curated_bodysite$mapped_body_site == curated_bodysite$mapped_body_subsite)
curated_bodysite[redundant_ind, c("mapped_body_subsite", "mapped_body_subsite_ontology_term_id")] <- NA

# Merge body_site and body_subsite to a single curated column
curated_bodysite <- curated_bodysite %>% mutate(curated_body_site = paste(mapped_body_site, mapped_body_subsite, sep=";"), curated_body_site_ontology_term_id = paste(mapped_body_site_ontology_term_id, mapped_body_subsite_ontology_term_id, sep=";"))

# Remove NA values
curated_bodysite <- data.frame(lapply(curated_bodysite, function(x) gsub("NA;", "", x)))
curated_bodysite <- data.frame(lapply(curated_bodysite, function(x) gsub(";NA", "", x)))
curated_bodysite <- data.frame(lapply(curated_bodysite, function(x) gsub("^$", NA, x)))

# Add source column
for (i in 1:nrow(curated_bodysite)){
  curated_bodysite$curated_body_site_source[i] <- paste(colnames(curated_bodysite[,2:3][which(!is.na(curated_bodysite[i,2:3]))]), collapse=";")
}

# Drop mapped columns and rename original columns
curated_bodysite <- curated_bodysite %>% 
  select(-c(mapped_body_site, mapped_body_site_ontology_term_id, 
            mapped_body_subsite, mapped_body_subsite_ontology_term_id)) %>%
  dplyr::rename("original_body_site" = "body_site", "original_body_subsite" = "body_subsite")
```

```{r eval=FALSE}
## Save
write.csv(curated_bodysite,
          file = "data/curated_body_site.csv",
          row.names = FALSE)
```
