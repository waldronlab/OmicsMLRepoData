---
title: "Harmonize gender information in cMD sample metadata"
author:
  - Sehyun Oh
  - Kai Gravel-Pucillo
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
abstract: "Prepare U24 Supplement: AI/ML-ready"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                    warning = FALSE,
                    message = FALSE,
                    collapse = TRUE)
```

# Overview

This .qmd file demonstrates a workflow for curating and harmonizing gender data 
with the curatedMetagenomicData package.
This file curates information from the original gender column to produce the 
curated sex column.

# Setup
## Load Packages

```{r load}
suppressPackageStartupMessages({
  library(curatedMetagenomicData)
  library(tidyverse)
  library(googlesheets4)
  library(rols)
  library(dplyr)
})
```

## Setup for Curation

We will first add a `curation_id` consisting of study name and sample ID (`study_name:sample_id`) to avoid confusion due to duplicated samples.

```{r curation_setup}
# Add curation ID
sampleMetadata$curation_id <- paste(sampleMetadata$study_name, sampleMetadata$sample_id, sep = ":")

# Define a project directory
proj_dir <- ""
```

# Exploratory Data Analysis & Data Curation

## Manual Data Corrections

Next, we will make some manual corrections to the data.
We will start by creating a tibble dataframe and searching the data for any
columns containing the words "sex" or "gender" in the name:
```{r}
# Create a tibble object 
samplemd <- as_tibble(sampleMetadata)

# Return all columns related to gender and sex
select(samplemd, contains("gender", ignore.case = T) | 
         contains("sex", ignore.case = T)) %>%
  colnames()
```

Then we will confirm that "gender" is the only column in the data containing 
information on sex by searching the data for any occurrences of the strings
"male", "m", "f", or "man" (these searches will inherently include results for
"woman" and "female"):
```{r}
# Create a list of search terms
queries <- list("male", "man$", "^f$", "^m$")

# Search the data for each term and return names of any columns containing it
for (x in queries){
  columns <- colnames(samplemd[,grepl(x, samplemd, ignore.case=T)])
  if (length(columns)>0){
    print(columns)
  } else{
    print(NA)
  }
}
```

Creating a table of counts for each unique value in the gender column reveals 
that 2572 values are NA. We can create a list of all studies contributing at 
least one of these NA values, and manually check the studies to see if any 
of the NA values can be filled in.
```{r eval=FALSE}
# Return a count for the number of occurrences of each unique value in "gender"
gen_counts <- count(samplemd, gender)

# Return a list of all the studies containing at least one NA value in the "gender" column
NA_studies <- unique(filter(samplemd, is.na(gender))$study_name)
```

After manual examination, the BedarfJR_2017 study was found to only have sampled
male patients, so the NA values from this study can be converted to "male". 
We can make a new column titled "curated_sex" to hold the updated values.
Finally, we can check that the values were properly updated by comparing the 
curated_sex and gender columns:
```{r}
# Make a column named "curated_sex" for the curated data
samplemd$curated_sex <- samplemd$gender

# Fill in any values that have been manually confirmed
samplemd$curated_sex[which(samplemd$study_name =="BedarfJR_2017")] <- "male"

# Compare the curated_sex column to the gender column
filter(samplemd, study_name=="BedarfJR_2017") %>%
  select(gender, curated_sex)
```


# Mapping

## Curated Table Creation

Then we will create our table of curated study condition data, including 
original values, curated values, and curated ontology term ids.
```{r}
# Create a dataframe of the relevant columns
curated_gender <- select(samplemd, curation_id, gender, curated_sex)

# Rename the columns for accuracy & specificity
colnames(curated_gender)[2] <- c("original_gender")
```

## Format
```{r}
curated_gender$curated_sex <- stringr::str_to_title(curated_gender$curated_sex)
curated_gender$curated_sex_ontology_term_id <- NA

femaleInd <- which(curated_gender$curated_sex == "Female")
curated_gender$curated_sex_ontology_term_id[femaleInd] <- "NCIT:C16576"
maleInd <- which(curated_gender$curated_sex == "Male")
curated_gender$curated_sex_ontology_term_id[maleInd] <- "NCIT:C20197"
```


## Export

Finally, we will export our completed table to GitHub.
```{r export_curated_table, eval=FALSE}
# export to GitHub
write.csv(curated_gender, "data/curated_gender.csv", row.names = FALSE)
```
