---
title: "cBioPoral Results for the AI/ML manuscript"
author:
  - Sehyun Oh
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE,
                      collapse = TRUE)
```

```{r echo=FALSE}
suppressPackageStartupMessages({
    library(dplyr)
    library(readr)
    library(ggplot2)
    library(OmicsMLRepoR)
    devtools::load_all("~/OmicsMLRepo/OmicsMLRepoCuration/")
})
```

# Summary
Load the merging schema
```{r}
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
cbio_ms <- read_csv(file.path(extDir, "cBioPortal_merging_schema.csv"))
```

## Compression (Attribute Standardization)
The number of original attributes merged into a new curated attribute
```{r}
legacy_cols <- cbio_ms %>%
    select(original_field) %>%
    tidyr::separate_longer_delim(., colnames(.), ";") %>%
    tidyr::separate_longer_delim(., colnames(.), "<;>") %>%
    tidyr::separate_longer_delim(., colnames(.), "::") %>%
    unique() %>%
    na.omit() %>%
    .[["original_field"]]

## the number of original columns
length(legacy_cols)
```

Range of compression: the number of original columns to one curated column
```{r}
summary(cbio_ms$original_field_num)
table(cbio_ms$original_field_num)
```

```{r}
## 'treatment_type' column collects information from 258 original columns.
cbio_ms[which.max(cbio_ms$original_field_num),]
```





## Completeness

The completeness of the attributes
```{r}
cbio_ms_expanded <- tidyr::separate_longer_delim(cbio_ms,
                                  cols = c("original_field",
                                                "original_field_completeness",
                                                "original_field_unique_values"),
                                  delim = ";") %>%
    summarise(original_field = original_field,
              original_field_completeness = as.numeric(original_field_completeness),
              original_field_unique_values = as.numeric(original_field_unique_values),
              curated_field = curated_field) %>%
    filter(!duplicated(original_field)) %>%
    na.omit()
```

```{r}
## Summary of original fields' completeness
summary(cbio_ms_expanded$original_field_completeness)
lowComp <- sum(cbio_ms_expanded$original_field_completeness < 1, na.rm = TRUE)
lowComp
round(lowComp/nrow(cbio_ms_expanded) * 100, 2) # proportion of attributes with completeness < 1%

## Summary of curated fields' completeness
cbio_ms_sub <- filter(cbio_ms, curated_field_completeness != 100) # remove two, newly created attributes
summary(cbio_ms_sub$curated_field_completeness)
highComp <- sum(cbio_ms_sub$curated_field_completeness > 10, na.rm = TRUE)
highComp
round(highComp/nrow(cbio_ms) * 100, 2)
```

```{r prepare_plot, echo=FALSE}
## Original columns's name/ completeness/ variability
ori_tb <- data.frame(
    fields = cbio_ms_expanded$original_field,
    completeness = cbio_ms_expanded$original_field_completeness,
    variability = cbio_ms_expanded$original_field_unique_values
)

## Curated columns's name/ completeness/ variability
curated_tb <- data.frame(
    fields = cbio_ms$curated_field,
    completeness = cbio_ms$curated_field_completeness,
    variability = cbio_ms$curated_field_unique_values
)

tb <- bind_rows(
    mutate(ori_tb, group = "original"),
    mutate(curated_tb, group = "curated")
)
```

```{r}
## Keep only two treatment attributes - name and type
all_trt <- grep("treatment_", cbio_ms$curated_field)
keep_trt <- grep("treatment_name|treatment_type", cbio_ms$curated_field)
ind <- setdiff(all_trt, keep_trt)
cbio_ms <- cbio_ms[-ind,]

## Remove '_details' attributes
all_detailed <- grep("_details", cbio_ms$curated_field)
cbio_ms <- cbio_ms[-all_detailed,]
```

```{r completeness_plot, echo=FALSE}
cbio_completeness <- cbio_ms %>%
    filter(!is.na(original_field_completeness)) %>%
    tidyr::separate_longer_delim(., original_field_completeness, ";") %>%
    mutate(original_field_completeness = as.numeric(original_field_completeness),
           curated_field_completeness = as.numeric(curated_field_completeness))

completeness_plot <- cbio_completeness %>%
    ggplot() +
    # geom_violin(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    geom_boxplot(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(x = "Curated Fields",
         y = "Completeness (%)") +
    theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +
    # scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
    geom_point(aes(x = curated_field, y = curated_field_completeness), 
               col = "red", alpha = 0.2, size = 2, shape = 1)

completeness_plot
```

```{r}
ggsave("figures/cbio_completeness.png", width = 6, height = 4, dpi = 600)
```



### Plot high-impacted subsets
#### Completeness
```{r}
comp_summary <- cbio_completeness %>%
    rename(ori = original_field_completeness,
           cura = curated_field_completeness) %>%
    group_by(curated_field) %>%
    mutate(ori = mean(ori),
           cura = unique(cura),
           increase_rate = cura/ori, # completeness change in fold
           increase_num = cura-ori) %>% # completeness change in actual percentage difference
    distinct(curated_field, increase_num, increase_rate, ori, cura)
comp_summary
```

```{r rate}
base <- "rate"
base <- "num"

if (base == "rate") {
    ## top 10 most increased (rate)
    high_comp_rate_attrs <- comp_summary$curated_field[order(comp_summary$increase_num, decreasing = TRUE)[1:10]] 
    ## remove three attributes with a high-completeness original attribute
    target_attrs <- high_comp_rate_attrs[which(!high_comp_rate_attrs %in% c("cancer_type", "cancer_type_detailed", "sex"))]
} else if (base == "num") {
    ## top 10 most increased (num)
    high_comp_num_attrs <- comp_summary$curated_field[order(comp_summary$increase_rate, decreasing = TRUE)[1:10]]
    ## remove three attributes with a high-completeness original attribute
    target_attrs <- high_comp_num_attrs[which(!high_comp_num_attrs %in% c("cancer_type", "cancer_type_detailed", "sex"))] 
}
```

```{r subset_plot, echo=FALSE, fig.width=2.7, fig.height=4.3}
sub_ind <- which(cbio_completeness$curated_field %in% target_attrs)

## Completeness subset
cbio_completeness[sub_ind,] %>%
    ggplot() +
    # geom_violin(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    geom_boxplot(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "cBioPortal - Completeness",
         subtitle = paste("Based on", base), 
         x = "",
         y = "Completeness (%)") +
    theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 9)) +
    geom_point(aes(x = curated_field, y = curated_field_completeness), 
               col = "red", alpha = 0.2, size = 2, shape = 1)
```

## Summary for the report
```{r eval=FALSE, eval=FALSE}
cbios <- readRDS("~/OmicsMLRepo/OmicsMLRepoData/cBioPortalData/source/cBioPortal_all_clinicalData_combined_2023-05-18.rds")
cbio <- readr::read_csv("~/OmicsMLRepo/OmicsMLRepoData/inst/extdata/cBioPortal_curated_metadata_release_tidy.csv")
```

Completeness of attributes before/after harmonization
```{r}
ms <- cbio_ms
comp_ori <- ms %>%
    select(grep("original_field", colnames(ms), value = TRUE)) %>%
    tidyr::separate_longer_delim(., cols = grep("original_field", colnames(ms), value = TRUE), delim = ";") %>%
    filter(!duplicated(original_field)) %>%
    filter(!is.na(original_field))
comp_cur <- ms %>%
    select(grep("curated_field", colnames(ms), value = TRUE)) %>%
    tidyr::separate_longer_delim(., cols = grep("curated_field", colnames(ms), value = TRUE), delim = ";") %>%
    filter(!duplicated(curated_field)) %>%
    filter(!is.na(curated_field))
```

```{r}
dim(comp_ori)
low_comp <- sum(as.numeric(comp_ori$original_field_completeness) < 1, na.rm = TRUE)
low_comp # the number of attributes with less than 1% completeness = 527
round(low_comp/nrow(comp_ori)*100, 2) # percentage of attributes with less than 1% complete = 78.31
```

```{r}
comp_cur <- comp_cur %>% filter(!curated_field %in% c("study_design", "target_condition"))
comp_cur$curated_field_completeness <- as.numeric(comp_cur$curated_field_completeness)
comp_cur$curated_field_unique_values <- as.integer(comp_cur$curated_field_unique_values)

dim(comp_cur)
summary(comp_cur$curated_field_completeness)
hi_comp <- sum(comp_cur$curated_field_completeness > 10, na.rm = TRUE)
hi_comp # the number of attributes with > 10% completeness = 15
round(hi_comp/nrow(comp_cur)*100, 2) # percentage of attributes with > 10% complete = 50
```


# Compatibility with BugSigDB
```{r}
library(bugsigdbr)
bsdb <- importBugSigDB()
```

```{r}
bsdb_sub <- select(bsdb, c("Study design", "PMID", "Body site", 
                           "UBERON ID", "Condition", "EFO ID"))
head(bsdb_sub)
table(bsdb_sub$`Study design`)
```




# Session Info
<details>
```{r eval=TRUE}
sessionInfo()
```
</details>


