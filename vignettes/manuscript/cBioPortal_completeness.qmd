---
title: "cBioPoral Results for the AI/ML manuscript"
author:
  - Sehyun Oh
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE,
                      collapse = TRUE)
```

```{r echo=FALSE}
suppressPackageStartupMessages({
    library(dplyr)
    library(readr)
    library(ggplot2)
    library(OmicsMLRepoR)
    devtools::load_all("~/OmicsMLRepo/OmicsMLRepoCuration/")
})
```

# Summary
Load the merging schema
```{r}
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
cbio_ms <- read_csv(file.path(extDir, "cBioPortal_merging_schema.csv"))
```

## Compression (Attribute Standardization)
The number of original attributes merged into a new curated attribute
```{r}
legacy_cols <- cbio_ms %>%
    select(original_field) %>%
    tidyr::separate_longer_delim(., colnames(.), ";") %>%
    tidyr::separate_longer_delim(., colnames(.), "<;>") %>%
    tidyr::separate_longer_delim(., colnames(.), "::") %>%
    unique() %>%
    na.omit() %>%
    .[["original_field"]]

## the number of original columns
length(legacy_cols)
```

Range of compression: the number of original columns to one curated column
```{r}
summary(cbio_ms$original_field_num)
table(cbio_ms$original_field_num)
```

```{r}
## 'treatment_type' column collects information from 258 original columns.
cbio_ms[which.max(cbio_ms$original_field_num),]
```


## Consolidation (Value Standardization)
The number of unique values for a given attribute
```{r}
trtDir <- "~/OmicsMLRepo/OmicsMLRepoData/cBioPortalData/cBioPortal_treatment"
trt_name_type <- read_csv(file.path(trtDir, "maps/cBioPortal_treatment_name_type_map.csv"))

nrow(trt_name_type) # the number of original values
length(unique(trt_name_type$curated_ontology)) # the number of curated values
```

```{r}
trt_case <- read_csv(file.path(trtDir, "maps/cBioPortal_treatment_case_map.csv"))

nrow(trt_case) # the number of original values
length(unique(trt_case$curated_ontology)) # the number of curated values
```

```{r}
trt_amount_time <- read_csv(file.path(trtDir, "maps/cBioPortal_treatment_amount_time_map.csv"))

nrow(trt_amount_time) # the number of original values
length(unique(trt_amount_time$curated_ontology)) # the number of curated values
```



## Completeness

The completeness of the attributes
```{r}
cbio_ms_expanded <- getLongMetaTb(cbio_ms,
                                 targetCols = c("original_field",
                                                "original_field_completeness",
                                                "original_field_unique_values"),
                                 delim = ";") %>%
    summarise(original_field = original_field,
              original_field_completeness = as.numeric(original_field_completeness),
              original_field_unique_values = as.numeric(original_field_unique_values),
              curated_field = curated_field) %>%
    filter(!duplicated(original_field)) %>%
    na.omit()
```

```{r}
## Summary of original fields' completeness
summary(cbio_ms_expanded$original_field_completeness)
lowComp <- sum(cbio_ms_expanded$original_field_completeness < 1, na.rm = TRUE)
lowComp
round(lowComp/nrow(cbio_ms_expanded) * 100, 2) # proportion of attributes with completeness < 1%

## Summary of curated fields' completeness
cbio_ms_sub <- filter(cbio_ms, curated_field_completeness != 100) # remove two, newly created attributes
summary(cbio_ms_sub$curated_field_completeness)
highComp <- sum(cbio_ms_sub$curated_field_completeness > 10, na.rm = TRUE)
highComp
round(highComp/nrow(cbio_ms) * 100, 2)
```

```{r prepare_plot, echo=FALSE}
## Original columns's name/ completeness/ variability
ori_tb <- data.frame(
    fields = cbio_ms_expanded$original_field,
    completeness = cbio_ms_expanded$original_field_completeness,
    variability = cbio_ms_expanded$original_field_unique_values
)

## Curated columns's name/ completeness/ variability
curated_tb <- data.frame(
    fields = cbio_ms$curated_field,
    completeness = cbio_ms$curated_field_completeness,
    variability = cbio_ms$curated_field_unique_values
)

tb <- bind_rows(
    mutate(ori_tb, group = "original"),
    mutate(curated_tb, group = "curated")
)
```

```{r completeness_plot, echo=FALSE}
cbio_completeness <- cbio_ms %>%
    filter(!is.na(original_field_completeness)) %>%
    tidyr::separate_longer_delim(., original_field_completeness, ";") %>%
    mutate(original_field_completeness = as.numeric(original_field_completeness),
           curated_field_completeness = as.numeric(curated_field_completeness))

cbio_completeness %>%
    ggplot() +
    # geom_violin(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    geom_boxplot(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "Completeness",
         x = "Curated Fields",
         y = "Completeness (%)") +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
    geom_point(aes(x = curated_field, y = curated_field_completeness), 
               col = "red", alpha = 0.2, size = 2, shape = 1)
```

```{r completeness_variability_plot, echo=FALSE, eval=FALSE}
ggplot(tb, aes(x = completeness, y = variability, color = group)) + 
    geom_point(position = position_dodge(), alpha = 0.7) + 
    scale_y_continuous(trans = "log10") +
    ggtitle("Completeness and Variability of Attributes \n (before and after harmonization)") +
    xlab("Completeness (%)") +
    ylab("# of Unique Values (log10)") +
    theme(legend.title = element_blank()) +
    scale_color_discrete(labels = c("Curated (n=29)", "Original (n=642)"))
```


```{r variability_plot_ver1, echo=FALSE}
## exclude the numeric attributes (i.e., age) from variability calculation
cbio_ms_sub <- cbio_ms[-grep("age_*", cbio_ms$curated_field),]

cbio_ms_sub %>%
    filter(!is.na(original_field_unique_values)) %>%
    tidyr::separate_longer_delim(., original_field_unique_values, ";") %>%
    group_by(curated_field) %>%
    reframe(original_field_unique_values = sum(as.numeric(original_field_unique_values)),
            curated_field_unique_values = as.numeric(curated_field_unique_values)) %>%
    ggplot() +
    geom_point(aes(x = curated_field, y = original_field_unique_values), 
               alpha = 0.3, size = 1) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "Consolidation",
         x = "Curated Fields",
         y = "# of Unique Values") +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
    geom_point(aes(x = curated_field, y = curated_field_unique_values), 
               col = "red", size = 2, shape = 1)
```

### Plot high-impacted subsets
#### Completeness
```{r}
comp_summary <- cbio_completeness %>%
    rename(ori = original_field_completeness,
           cura = curated_field_completeness) %>%
    group_by(curated_field) %>%
    mutate(ori = mean(ori),
           cura = unique(cura),
           increase_rate = cura/ori, # completeness change in fold
           increase_num = cura-ori) %>% # completeness change in actual percentage difference
    distinct(curated_field, increase_num, increase_rate, ori, cura)
comp_summary
```

```{r}
## top 10 most increased (rate)
high_comp_rate_attrs <- comp_summary$curated_field[order(comp_summary$increase_num, decreasing = TRUE)[1:10]] 
## top 10 most increased (num)
high_comp_num_attrs <- comp_summary$curated_field[order(comp_summary$increase_rate, decreasing = TRUE)[1:10]]

## remove some with one of the original attribute with high completeness
target_attrs <- high_comp_rate_attrs[which(!high_comp_rate_attrs %in% c("cancer_type", "cancer_type_detailed", "sex"))] 
```

```{r subset_plot, echo=FALSE, fig.width=2.7, fig.height=4}
sub_ind <- which(cbio_completeness$curated_field %in% target_attrs)

## Completeness subset
cbio_completeness[sub_ind,] %>%
    ggplot() +
    # geom_violin(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    geom_boxplot(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "cBioPortal - Completeness",
         x = "Curated Fields",
         y = "Completeness (%)") +
    theme(axis.text.x = element_text(angle = 40, hjust = 1, size = 9)) +
    geom_point(aes(x = curated_field, y = curated_field_completeness), 
               col = "red", alpha = 0.2, size = 2, shape = 1)
```

#### Consolidation
```{r}
## Consolidation subset
ms_summary <- cbio_ms_sub %>%
    filter(!is.na(original_field_unique_values)) %>%
    tidyr::separate_longer_delim(., original_field_unique_values, ";") %>%
    group_by(curated_field) %>%
    reframe(ori = sum(as.numeric(original_field_unique_values)),
            cura = as.numeric(curated_field_unique_values)) %>%
    mutate(reduction_rate = round(((ori-cura)/ori)*100, 2), # reduction rate
           reduction_num = abs(ori-cura)) %>% # the actual number of reduction
    distinct(curated_field, reduction_num, reduction_rate, ori, cura)

# hist(ms_summary$reduction_rate)
# high_red_attrs <- ms_summary$curated_field[ms_summary$reduction_rate >= 50]
high_red_attrs <- ms_summary$curated_field[order(ms_summary$reduction_num, decreasing = TRUE)[1:10]] # top 10 most number reduction
```

```{r fig.width=3.2, fig.height=4}
sub_ind <- which(cbio_ms_sub$curated_field %in% high_red_attrs)
cbio_ms_sub[sub_ind,] %>%
    filter(!is.na(original_field_unique_values)) %>%
    tidyr::separate_longer_delim(., original_field_unique_values, ";") %>%
    group_by(curated_field) %>%
    reframe(original_field_unique_values = sum(as.numeric(original_field_unique_values)),
            curated_field_unique_values = as.numeric(curated_field_unique_values)) %>%
    ggplot() +
    geom_point(aes(x = curated_field, y = original_field_unique_values), 
               alpha = 0.3, size = 1) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "cBioPortalData - Consolidation",
         x = "Curated Fields",
         y = "# of Unique Values") +
    theme(axis.text.x = element_text(angle = 40, hjust = 1, size = 9)) +
    geom_point(aes(x = curated_field, y = curated_field_unique_values), 
               col = "red", size = 2, shape = 1)
```

```{r var_plot_ver2, echo=FALSE}
## Collect all the map files and calculate how many are coerced
```


## Correction
```{r}

```



# Individual Attributes
## Disease
```{r}
msDir <- "~/OmicsMLRepo/OmicsMLRepoData/cBioPortalData/merging_schema"
disease_ms <- read_csv(file.path(msDir, "cBioPortal_merging_schema_disease.csv"))

length(unique(disease_ms$curated_field)) # the number of curated fields for disease-associated information
length(unique(disease_ms$original_field)) # the number of original fields for disease curation
```

```{r}
mapDir <- "~/OmicsMLRepo/OmicsMLRepoData/cBioPortalData/maps"
disease_map <- read_csv(file.path(mapDir, "cBioPortal_disease_map.csv"))
```

## Treatment
466 original columns were merged into six treatment_* columns.
```{r}
trt_ms <- cbio_ms[grep("treatment", cbio_ms$curated_field),]
sapply(trt_ms$original_field, strsplit, ";") %>% unlist %>% unique %>% length
```

```{r}

```


# Compatibility with BugSigDB
```{r}
library(bugsigdbr)
bsdb <- importBugSigDB()
```

```{r}
bsdb_sub <- select(bsdb, c("Study design", "PMID", "Body site", 
                           "UBERON ID", "Condition", "EFO ID"))
head(bsdb_sub)
table(bsdb_sub$`Study design`)
```




# Session Info
<details>
```{r eval=TRUE}
sessionInfo()
```
</details>


