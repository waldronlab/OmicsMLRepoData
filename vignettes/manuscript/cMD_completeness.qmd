---
title: "cMD Completeness - Overall Effects"
author: Sehyun Oh
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE,
                      collapse = TRUE)
```

```{r echo=FALSE}
suppressPackageStartupMessages({
    library(dplyr)
    library(readr)
    library(ggplot2)
    library(OmicsMLRepoR)
    devtools::load_all("~/OmicsMLRepo/OmicsMLRepoCuration/")
})
```

# Summary
Load the merging schema
```{r}
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
ms <- read_csv(file.path(extDir, "cMD_merging_schema.csv"))
```

## Compression
The original attributes kept the way they are:
```{r}
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
map <- read_csv(file.path(extDir, "cMD_ms_allCols.csv"))
# numOfOriCols <- map %>% group_by(curated_column) %>% summarise(n = n()) 


## Original columns kept the way they are
cols_kept <- map %>%
    filter(curated_column %in% c("identification", "independent", "sequencing")) %>%
    pull(ori_column)

## Original columns removed
cols_removed <- map %>%
    filter(curated_column == "remove") %>%
    pull(ori_column)

## Original columns kept under `uncurated_metadata`
cols_uncurated <- map %>%
    filter(curated_column == "uncurated_metadata") %>%
    pull(ori_column)
```

The number of original attributes merged into a new curated attribute
```{r}
legacy_cols <- ms %>%
    select(original_field) %>%
    tidyr::separate_longer_delim(., colnames(.), ";") %>%
    tidyr::separate_longer_delim(., colnames(.), "<;>") %>%
    tidyr::separate_longer_delim(., colnames(.), "::") %>%
    unique() %>%
    na.omit() %>%
    .[["original_field"]]

## the number of original columns
length(legacy_cols)
```

```{r}
all_cols <- c(cols_kept, cols_removed, cols_uncurated, legacy_cols)
length(all_cols)
```

Range of compression: the number of original columns to one curated column
```{r}
summary(ms$original_field_num)
table(ms$original_field_num)
```

```{r}
## 'biomarker' column combines information from 38 original columns.
ms[which.max(ms$original_field_num),]
```



## Completeness

The completeness of the attributes
```{r}
ms_expanded <- getLongMetaTb(ms,
                                 targetCol = c("original_field",
                                               "original_field_completeness",
                                               "original_field_unique_values"),
                                 delim = ";") %>%
    summarise(original_field = original_field,
              original_field_completeness = as.numeric(original_field_completeness),
              original_field_unique_values = as.numeric(original_field_unique_values),
              curated_field = curated_field) %>%
    filter(!duplicated(original_field)) %>%
    na.omit()
```

```{r}
## Summary of original fields' completeness
summary(ms_expanded$original_field_completeness)
lowComp <- sum(ms_expanded$original_field_completeness < 1, na.rm = TRUE)
lowComp
round(lowComp/nrow(ms_expanded) * 100, 2) # proportion of attributes with completeness < 1%

## Summary of curated fields' completeness
ms_sub <- filter(ms, curated_field_completeness != 100) # remove two, newly created attributes
summary(ms_sub$curated_field_completeness)
highComp <- sum(ms_sub$curated_field_completeness > 10, na.rm = TRUE)
highComp
round(highComp/nrow(ms) * 100, 2)
```

```{r prepare_plot, echo=FALSE}
## Original columns's name/ completeness/ variability
ori_tb <- data.frame(
    fields = ms_expanded$original_field,
    completeness = ms_expanded$original_field_completeness,
    variability = ms_expanded$original_field_unique_values
)

## Curated columns's name/ completeness/ variability
curated_tb <- data.frame(
    fields = ms$curated_field,
    completeness = ms$curated_field_completeness,
    variability = ms$curated_field_unique_values
) %>%
    getLongMetaTb(targetCol = colnames(.), delim = ";")
curated_tb[[2]] <- as.numeric(curated_tb[[2]])
curated_tb[[3]] <- as.numeric(curated_tb[[3]])

tb <- bind_rows(
    mutate(ori_tb, group = "original"),
    mutate(curated_tb, group = "curated")
)
```

```{r completeness_plot, echo=FALSE}
cbio_completeness <- ms %>%
    filter(!is.na(original_field_completeness)) %>%
    tidyr::separate_longer_delim(., original_field_completeness, ";") %>%
    mutate(original_field_completeness = as.numeric(original_field_completeness),
           curated_field_completeness = as.numeric(curated_field_completeness))

cbio_completeness %>%
    ggplot() +
    # geom_violin(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    geom_boxplot(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(x = "Curated Fields",
         y = "Completeness (%)") +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
    geom_point(aes(x = curated_field, y = curated_field_completeness), 
               col = "red", alpha = 0.2, size = 2, shape = 1)
```

```{r completeness_plot_for_papaer, echo=FALSE, fig.width=2, fig.height=3.5}
attrs_selected <- c("smoker", "biomarker", "hla")
cbio_completeness_sub <- ms %>%
    filter(!is.na(original_field_completeness)) %>%
    tidyr::separate_longer_delim(., original_field_completeness, ";") %>%
    mutate(original_field_completeness = as.numeric(original_field_completeness),
           curated_field_completeness = as.numeric(curated_field_completeness)) %>%
    filter(curated_field %in% attrs_selected)

cbio_completeness_sub %>%
    ggplot() +
    # geom_violin(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    geom_boxplot(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "",
         x = "Curated Fields",
         y = "Completeness (%)") +
    # theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
    theme(axis.text.x = element_text(angle = 40, hjust = 1, size = 12),
          axis.text.y = element_text(size = 10),
          axis.title.y = element_text(size = 12))+
    geom_point(aes(x = curated_field, y = curated_field_completeness), 
               col = "red", alpha = 0.2, size = 2, shape = 1)
```

```{r}
ggsave("figures/cmd_completeness.png", width = 2, height = 3.5, dpi = 600)
```

```{r completeness_variability_plot, echo=FALSE, eval=FALSE}
ggplot(tb, aes(x = completeness, y = variability, color = group)) + 
    geom_point(position = position_dodge(), alpha = 0.7) + 
    scale_y_continuous(trans = "log10") +
    ggtitle("Completeness and Variability of Attributes \n (before and after harmonization)") +
    xlab("Completeness (%)") +
    ylab("# of Unique Values (log10)") +
    theme(legend.title = element_blank()) +
    scale_color_discrete(labels = c("Curated (n=29)", "Original (n=642)"))
```


 
```{r variability_plot_ver1, echo=FALSE}
## exclude the numeric attributes (i.e., age) from variability calculation
ms_sub <- ms[-grep("age_*", ms$curated_field),]

## exclude the ID attribute (i.e., ncbi_accession) from variability calculation
ms_sub <- ms_sub[-grep("ncbi_accession", ms_sub$curated_field),]

ms_sub %>%
    filter(!is.na(original_field_unique_values)) %>%
    tidyr::separate_longer_delim(., original_field_unique_values, ";") %>%
    group_by(curated_field) %>%
    reframe(original_field_unique_values = sum(as.numeric(original_field_unique_values)),
            curated_field_unique_values = as.numeric(curated_field_unique_values)) %>%
    ggplot() +
    geom_point(aes(x = curated_field, y = original_field_unique_values), 
               alpha = 0.3, size = 1) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "Variability of Fields",
         x = "Curated Fields",
         y = "# of Unique Values") +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
    geom_point(aes(x = curated_field, y = curated_field_unique_values), 
               col = "red", size = 2, shape = 1)
```

Split the 'combined' attributes from the above.
```{r echo=FALSE}
targetRows <- grep(";", ms_sub$curated_field)
targetCols <- colnames(ms_sub)[grep("curated_", colnames(ms_sub))]
ms_sub_long <- OmicsMLRepoR::getLongMetaTb(ms_sub[targetRows,], targetCol = targetCols, delim = ";")

ms_sub_long %>%
    filter(!is.na(original_field_unique_values)) %>%
    tidyr::separate_longer_delim(., original_field_unique_values, ";") %>%
    group_by(curated_field) %>%
    reframe(original_field_unique_values = sum(as.numeric(original_field_unique_values)),
            curated_field_unique_values = as.numeric(curated_field_unique_values)) %>%
    ggplot() +
    geom_point(aes(x = curated_field, y = original_field_unique_values), 
               alpha = 0.3, size = 1) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "Variability of Fields",
         x = "Curated Fields",
         y = "# of Unique Values") +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
    geom_point(aes(x = curated_field, y = curated_field_unique_values), 
               col = "red", size = 2, shape = 1)
```

```{r variability_plot_ver1_sub_for_publication, echo=FALSE}
## Select most critical 
sub_attributes <- c("ancestry", "biomarker", "disease")
targetCols <- colnames(ms_sub)[grep("curated_", colnames(ms_sub))]
ms_sub_long2 <- OmicsMLRepoR::getLongMetaTb(ms_sub, targetCol = targetCols, delim = ";")
ms_sub2 <- ms_sub_long2 %>%
    filter(curated_field %in% sub_attributes)

ms_sub2 %>%
    filter(!is.na(original_field_unique_values)) %>%
    tidyr::separate_longer_delim(., original_field_unique_values, ";") %>%
    group_by(curated_field) %>%
    reframe(original_field_unique_values = sum(as.numeric(original_field_unique_values)),
            curated_field_unique_values = as.numeric(curated_field_unique_values)) %>%
    ggplot() +
    geom_point(aes(x = curated_field, y = original_field_unique_values), 
               alpha = 0.3, size = 1) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "Variability of Fields",
         x = "",
         y = "# of Unique Values") +
    theme(axis.text.x = element_text(size = 12)) +
    geom_point(aes(x = curated_field, y = curated_field_unique_values), 
               col = "red", size = 2, shape = 1)
```

```{r var_plot_ver2, echo=FALSE}
## Collect all the map files and calculate how many are coerced
```



# Session Info
<details>
```{r eval=TRUE}
sessionInfo()
```
</details>


