---
title: "cMD Completeness - Overall Effects"
author: Sehyun Oh
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
    html:
        fontsize: 14pxs
        toc: true
        top-depth: 3
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE,
                      collapse = TRUE)
```

```{r echo=FALSE}
suppressPackageStartupMessages({
    library(dplyr)
    library(readr)
    library(ggplot2)
    library(OmicsMLRepoR)
    devtools::load_all("~/OmicsMLRepo/OmicsMLRepoCuration/")
})
```

# Summary
Load the merging schema
```{r}
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
ms <- read_csv(file.path(extDir, "cMD_merging_schema.csv"))
```

Check the harmonization actions per attribute; i.e., kepts, removed, and saved as 'uncurated'
```{r}
extDir <- "~/OmicsMLRepo/OmicsMLRepoData/inst/extdata"
map <- read_csv(file.path(extDir, "cMD_ms_allCols.csv"))
# numOfOriCols <- map %>% group_by(curated_column) %>% summarise(n = n()) 

## Original columns kept the way they are
cols_kept <- map %>%
    filter(curated_column %in% c("identification", "independent", "sequencing")) %>%
    pull(ori_column)

## Original columns removed
cols_removed <- map %>%
    filter(curated_column == "remove") %>%
    pull(ori_column)

## Original columns kept under `uncurated_metadata`
cols_uncurated <- map %>%
    filter(curated_column == "uncurated_metadata") %>%
    pull(ori_column)
```

The number of original attributes merged into a new curated attribute
```{r}
legacy_cols <- ms %>%
    select(original_field) %>%
    tidyr::separate_longer_delim(., colnames(.), ";") %>%
    tidyr::separate_longer_delim(., colnames(.), "<;>") %>%
    tidyr::separate_longer_delim(., colnames(.), "::") %>%
    unique() %>%
    na.omit() %>%
    .[["original_field"]]

## the number of original columns
paste(length(legacy_cols), "original cMD attributes were harmonized.")
```

Range of compression: the number of original columns to one curated column
```{r}
summary(ms$original_field_num)
table(ms$original_field_num, useNA = "ifany")
```

```{r}
## 'biomarker' column combines information from 38 original columns.
ms[which.max(ms$original_field_num),]
```



# Completeness

```{r completeness_plot, echo=FALSE}
cmd_comp <- ms %>%
    select(curated_field, curated_field_completeness, original_field_completeness) %>%
    filter(!is.na(original_field_completeness)) %>%
    tidyr::separate_longer_delim(cols = c("curated_field", "curated_field_completeness"), delim = ";") %>%
    tidyr::separate_longer_delim(cols = "original_field_completeness", delim = ";")  %>%
    mutate(original_field_completeness = as.numeric(original_field_completeness),
           curated_field_completeness = as.numeric(curated_field_completeness))

cmd_comp %>%
    ggplot() +
    geom_boxplot(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    theme_bw() +
    labs(x = "",
         y = "Completeness (%)") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9)) +
    geom_point(aes(x = curated_field, y = curated_field_completeness), 
               col = "red", alpha = 0.2, size = 2, shape = 1)
```

```{r completeness_plot_for_papaer, echo=FALSE, fig.width=2, fig.height=3.5}
attrs_selected <- c("smoker", "biomarker", 
                    # "feces_phenotype", "tumor_staging_ajcc",
                    "hla")
completeness_sub <- ms %>%
    filter(!is.na(original_field_completeness)) %>%
    tidyr::separate_longer_delim(., original_field_completeness, ";") %>%
    mutate(original_field_completeness = as.numeric(original_field_completeness),
           curated_field_completeness = as.numeric(curated_field_completeness)) %>%
    filter(curated_field %in% attrs_selected)

completeness_sub %>%
    ggplot(aes(x = curated_field, y = original_field_completeness)) +
    # geom_violin(aes(x = curated_field, y = original_field_completeness), alpha = 0.3) +
    geom_boxplot(alpha = 0.3, outlier.shape = NA) +
    geom_jitter(color = "black", alpha = 0.4, size = 1) +
    theme_bw() +
    # scale_y_continuous(limits = c(1, 100), trans = "log10") +
    labs(title = "",
         x = "",
         y = "Completeness (%)") +
    theme(axis.text.x = element_text(angle = 40, hjust = 1, size = 12),
          axis.text.y = element_text(size = 10),
          axis.title.y = element_text(size = 12)) +
    geom_point(aes(x = curated_field, y = curated_field_completeness), 
               col = "red", alpha = 0.2, size = 2, shape = 1)
```

```{r}
ggsave("figures/cmd_completeness.png", width = 2, height = 3.5, dpi = 600)
```





# Session Info
<details>
```{r eval=TRUE}
sessionInfo()
```
</details>


